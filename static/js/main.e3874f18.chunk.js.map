{"version":3,"sources":["logo.svg","components/layout.tsx","constants.tsx","components/mainForm.tsx","components/displaySecret.tsx","components/notFound.tsx","components/errorPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","style","h1","marginTop","App","children","Header","as","content","textAlign","src","logo","className","alt","Container","API_URL","getRandomString","length","randomChars","result","i","charAt","Math","floor","random","MainForm","props","useEffect","register","name","required","useState","url","setUrl","formLoading","setLoading","form","copy","visibility","setVisibility","useForm","errors","handleSubmit","setValue","triggerValidation","onSubmit","data","a","key","pass","ciphertext","crypto","AES","encrypt","secret","toString","request","axios","post","response","console","log","window","location","href","setTimeout","history","push","Grid","Row","centered","Column","width","Transition","visible","animation","duration","de","Input","fluid","defaultValue","action","color","labelPosition","icon","onClick","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","toast","type","title","description","time","Form","TextArea","rows","placeholder","onChange","e","error","Button","position","Dimmer","active","page","Loader","inverted","DisplaySecret","setData","match","params","id","split","then","res","decrypt","enc","Utf8","catch","err","NotFound","ErrorPage","basename","process","exact","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3874f18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\r\nimport { Header, Container } from 'semantic-ui-react';\r\nimport logo from '../logo.svg';\r\n\r\nconst style = {\r\n    h1: {\r\n        marginTop: '3em',\r\n    },\r\n}\r\n\r\nconst App = ({children}) => {\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Entangle' style={style.h1} textAlign='center' />\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <Container>\r\n                {children}\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","export const API_URL = \"http://sleepy-earth-62648.herokuapp.com/api\";\r\nexport const BASE_URL = \"/entangle\";","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Button, Grid, Transition, Input, Dimmer, Loader } from \"semantic-ui-react\";\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport { useForm } from \"react-hook-form\";\r\nimport crypto from 'crypto-js';\r\nimport axios from 'axios';\r\nimport { API_URL, BASE_URL } from '../constants';\r\n\r\nfunction getRandomString(length) {\r\n  var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n  var result = '';\r\n  for (var i = 0; i < length; i++) {\r\n    result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\r\n  }\r\n  return result;\r\n}\r\n\r\ninterface Request {\r\n  key: string\r\n  ciphertext: string\r\n}\r\n\r\ninterface Response { }\r\n\r\nconst MainForm = (props) => {\r\n  useEffect(() => {\r\n    register({ name: \"secret\" }, { required: true });\r\n  }, []);\r\n\r\n  const [url, setUrl] = useState(\"\");\r\n  const [formLoading, setLoading] = useState(false);\r\n  const [visibility, setVisibility] = useState({ form: true, copy: false });\r\n\r\n  const { register, errors, handleSubmit, setValue, triggerValidation } = useForm()\r\n  const onSubmit = async data => {\r\n    setLoading(true);\r\n    const key: string = getRandomString(10);\r\n    const pass: string = getRandomString(20);\r\n    const ciphertext = crypto.AES.encrypt(data.secret, pass).toString();\r\n\r\n    const request: Request = {\r\n      key: key,\r\n      ciphertext: ciphertext\r\n    }\r\n    let response: Response\r\n    try {\r\n      response = await axios.post<Request, Response>(`${API_URL}/message`, request);\r\n      console.log(response);\r\n      setUrl(`${window.location.href}${key}-${pass}`);\r\n      setVisibility({ form: false, copy: false });\r\n      setTimeout(function(){ setVisibility({ form: false, copy: true }); }, 500);\r\n    } catch (e) {\r\n      props.history.push(`${BASE_URL}/errorPage`);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  const onIconCopy = () => {\r\n    const el = document.createElement('textarea');\r\n    el.value = url;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n    toast({\r\n      type: 'success',\r\n      icon: 'copy',\r\n      title: 'Copied',\r\n      description: 'URL has been copied to your clipboard',\r\n      animation: 'fade up',\r\n      time: 3000,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Grid.Column width={8} textAlign=\"center\">\r\n            <Transition visible={visibility.copy} animation='fade up' duration={500} de>\r\n              <>\r\n                <Input fluid\r\n                  defaultValue={url}\r\n                  action={{\r\n                    color: 'teal',\r\n                    labelPosition: 'right',\r\n                    icon: 'copy',\r\n                    content: 'Copy',\r\n                    onClick: onIconCopy\r\n                  }} />\r\n              </>\r\n            </Transition>\r\n            <Transition visible={visibility.form} animation='fade up' duration={500}>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Form.TextArea\r\n                  rows={5}\r\n                  name=\"secret\"\r\n                  placeholder='Enter your secret'\r\n                  onChange={async (e, { name, value }) => {\r\n                    setValue(name, value);\r\n                    await triggerValidation(name);\r\n                  }}\r\n                  error={errors.secret ? true : false}\r\n                />\r\n                <Button>Save secret</Button>\r\n              </Form>\r\n            </Transition>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <SemanticToastContainer position=\"bottom-right\" />\r\n      <Dimmer\r\n        active={formLoading}\r\n        page={true}>\r\n        <Loader inverted>Loading</Loader>\r\n      </Dimmer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainForm;","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Form, TextArea, Dimmer, Loader } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport crypto from 'crypto-js';\r\nimport { API_URL, BASE_URL } from '../constants';\r\n\r\nconst DisplaySecret = (props) => {\r\n    const [data, setData] = useState(\"\");\r\n    const [formLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const [key, pass] = props.match.params.id.split('-');\r\n        axios(\r\n            `${API_URL}/message/${key}`,\r\n        ).then(res => {\r\n            const ciphertext = res.data.ciphertext;\r\n            const secret = crypto.AES.decrypt(ciphertext, pass).toString(crypto.enc.Utf8);\r\n            setData(secret);\r\n            setLoading(false);\r\n        }).catch(err => {\r\n            props.history.push(`${BASE_URL}/notFound`);\r\n        });\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Grid>\r\n                <Grid.Row centered>\r\n                    <Grid.Column width={8} textAlign=\"center\">\r\n                        <Form>\r\n                            <TextArea\r\n                                rows={5}\r\n                                name=\"secret\"\r\n                                defaultValue={data}\r\n                            />\r\n                        </Form>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Dimmer\r\n                active={formLoading}\r\n                page={true}>\r\n                <Loader inverted>Loading</Loader>\r\n            </Dimmer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DisplaySecret;","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"ui statistic\">\r\n            <div className=\"value\">404</div>\r\n            <div className=\"label\">Error</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from \"react\";\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <h1>\r\n            Upsy.... something went horribly wrong\r\n        </h1>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Layout from \"./components/layout\";\nimport MainForm from \"./components/mainForm\";\nimport DisplaySecret from \"./components/displaySecret\";\nimport NotFound from \"./components/notFound\";\nimport ErrorPage from \"./components/errorPage\";\nimport { BASE_URL } from './constants';\n\nconst App = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Layout>\n          <Switch>\n            <Route exact path={`/`} component={MainForm} />\n            <Route path={`/notFound`} component={NotFound} />\n            <Route path={`/errorPage`} component={ErrorPage} />\n            <Route path={`/:id`} component={DisplaySecret} />\n          </Switch>\n        </Layout>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}