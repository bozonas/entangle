{"version":3,"sources":["logo.svg","mainForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FormExampleFieldError","useEffect","register","name","required","useForm","errors","handleSubmit","setValue","triggerValidation","Form","onSubmit","data","key","length","randomChars","result","i","charAt","Math","floor","random","getRandomString","console","log","ciphertext","crypto","AES","encrypt","JSON","stringify","toString","TextArea","rows","placeholder","onChange","e","a","value","error","secret","Button","style","h1","marginTop","App","className","Header","as","content","textAlign","src","logo","alt","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,kSCc3C,IAkCeC,EAlCe,WAC5BC,qBAAU,WACRC,EAAS,CAAEC,KAAM,UAAY,CAAEC,UAAU,MACxC,IAH+B,MAKsCC,cAAhEH,EAL0B,EAK1BA,SAAUI,EALgB,EAKhBA,OAAQC,EALQ,EAKRA,aAAcC,EALN,EAKMA,SAAUC,EALhB,EAKgBA,kBAYlD,OACE,kBAACC,EAAA,EAAD,CAAMC,SAAUJ,GAZD,SAAAK,GACf,IAAIC,EAhBR,SAAyBC,GAGvB,IAFA,IAAIC,EAAc,0DACdC,EAAS,GACHC,EAAI,EAAGA,EAAIH,EAAQG,IACzBD,GAAUD,EAAYG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAAYD,SAExE,OAAOE,EAUaM,CAAgB,IAClCC,QAAQC,IAAIX,GACZ,IAAIY,EAAaC,IAAOC,IAAIC,QAAQC,KAAKC,UAAUlB,GAAOC,GAAKkB,WAC/DR,QAAQC,IAAIC,GAIZF,QAAQC,IAAIZ,OAKV,kBAACF,EAAA,EAAKsB,SAAN,CACEC,KAAM,EACN9B,KAAK,SACL+B,YAAY,oBACZC,SAAQ,uCAAE,WAAOC,EAAP,oBAAAC,EAAA,6DAAYlC,EAAZ,EAAYA,KAAMmC,EAAlB,EAAkBA,MAC1B9B,EAASL,EAAMmC,GADP,SAEF7B,EAAkBN,GAFhB,2CAAF,wDAIRoC,QAAOjC,EAAOkC,SAEhB,kBAACC,EAAA,EAAD,sBCrCAC,EAAQ,CACZC,GAAI,CACFC,UAAW,QAgBAC,EAZH,WACV,OACE,yBAAKC,UAAU,OACf,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,WAAWP,MAAOA,EAAMC,GAAIO,UAAU,WAC9D,yBAAKC,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,SCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6388860.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from \"react\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport crypto from 'crypto-js';\r\n\r\nfunction getRandomString(length) {\r\n  var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_!';\r\n  var result = '';\r\n  for ( var i = 0; i < length; i++ ) {\r\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst FormExampleFieldError = () => {\r\n  useEffect(() => {\r\n    register({ name: \"secret\" }, { required: true });\r\n  }, []);\r\n\r\n  const { register, errors, handleSubmit, setValue, triggerValidation } = useForm()\r\n  const onSubmit = data => {\r\n    let key: string = getRandomString(20);\r\n    console.log(key);\r\n    var ciphertext = crypto.AES.encrypt(JSON.stringify(data), key).toString();\r\n    console.log(ciphertext);\r\n\r\n    // send here!\r\n\r\n    console.log(data);\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Form.TextArea\r\n        rows={5}\r\n        name=\"secret\"\r\n        placeholder='Enter your secret'\r\n        onChange={async (e, { name, value }) => {\r\n          setValue(name, value);\r\n          await triggerValidation(name);\r\n        }}\r\n        error={errors.secret ? true : false}\r\n      />\r\n      <Button>Save secret</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormExampleFieldError;","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Header, Container } from 'semantic-ui-react';\nimport MainForm from \"./mainForm\";\n\nconst style = {\n  h1: {\n    marginTop: '3em',\n  },\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    <Header as='h1' content='Entangle' style={style.h1} textAlign='center' />\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    <Container>\n      <MainForm />\n    </Container>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}